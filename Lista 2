;#####################################################################################################
;;
;; LISTA AVALIADA 2
;;
;#####################################################################################################
;; IDENTIFICAÇÃO DO GRUPO
;; Escreva abaixo, em ordem alfabética, o nome e número de matrícula de todos os membros do grupo:
;;    Nome Sobrenome Matrícula
;; 1.
;; 2.
;; 3. Gabrielly Christine dos Santos Moraes 00343872
;; 4. Yasmin Chaves Scimczak Medeiros 00344643
;#####################################################################################################

;; ========================================================================================
;;                              DEFINIÇÕES DE DADOS
;; ========================================================================================
;; -----------------
;; TIPO TipoDeForma:
;; -----------------
;; Um TipoDeForma pode ser
;; 1. "retângulo", ou
;; 2. "triângulo", ou
;; 3. "círculo", ou
;; 4. "estrela"

;; -----------------
;; TIPO CorDeForma:
;; -----------------
;; Uma CorDeForma pode ser
;; 1. "red", ou
;; 2. "blue", ou
;; 3. "green", ou
;; 4. "yellow", ou
;; 5. "orange", ou
;; 6. "brown"

;; -------------------
;; TIPO ListaDeNumeros:
;; -------------------
;; Uma ListaDeNumeros é
;; 1. empty (lista vazia), ou
;; 2. (cons n ln), onde n: Número e ln: ListaDeNumeros
;;Retangulo
(define LN1-RET
         (cons 2(cons 4 empty)))
(define LN2-RET
         (cons 6(cons 8 empty)))
(define LN3-RET
         (cons 10(cons 12 empty)))
(define LN4-RET
         (cons 14(cons 16 empty)))
(define LN5-RET
         (cons 18(cons 20 empty)))
(define LN6-RET
         (cons 22(cons 24 empty)))

;;estrela:
(define LN1-EST
         (cons 1(cons 3 (cons 5 empty))))
(define LN2-EST
         (cons 7(cons 9 (cons 11 empty))))
(define LN3-EST
         (cons 13(cons 15 (cons 17 empty))))
(define LN4-EST
         (cons 19(cons 21 (cons 23 empty))))
(define LN5-EST
         (cons 25(cons 27 (cons 29 empty))))
(define LN6-EST
         (cons 30(cons 33 (cons 35 empty))))
;;circulos e triangulos
(define LN1-CIReTRIAN
         (cons 2 empty))
(define LN2-CIReTRIAN
         (cons 8 empty))
(define LN3-CIReTRIAN
         (cons 12 empty))
(define LN4-CIReTRIAN
         (cons 24 empty))
(define LN5-CIReTRIAN
         (cons 26 empty))
(define LN6-CIReTRIAN
         (cons 28 empty))
;; -----------
;; TIPO Forma:
;; -----------
(define-struct forma (nome tipo cor args))
;; Um elemento do conjunto Forma tem o formato
;;    (make-forma n t c a), onde
;;    n : String, é o nome da forma
;;    t : TipoDeForma, é o tipo da forma
;;    c : CorDeForma, é a cor da forma
;;    a : ListaDeNumeros, é a lista de argumentos da forma, confore seu tipo:
;;                        - retângulos possumes 2 argumentos, largura e altura;
;;                        - triângulos possumes 1 argumento, o lado;
;;                        - círculos possumes 1 argumento, o raio;
;;                        - estrelas possumes 3 argumentos, o número de pontas, o
;;                          raio interno e o raio externo.

;;estrelas
(define E1
       (make-forma
         "E1"
          "estrela"
          "red"
          LN1-EST))
(define E2
       (make-forma
         "E2"
          "estrela"
          "blue"
          LN3-EST))
(define E3
       (make-forma
         "E3"
          "estrela"
          "green"
          LN4-EST))
(define E4
       (make-forma
         "E4"
          "estrela"
          "yellow"
          LN4-EST))

(define E5
       (make-forma
         "E5"
          "estrela"
          "orange"
          LN2-EST))
(define E6
       (make-forma
         "E6"
          "estrela"
          "brown"
          LN2-EST))


;;TRIANGULOS

(define T1
       (make-forma
         "T1"
          "triângulo"
          "red"
          LN1-CIReTRIAN))
(define T2
       (make-forma
         "T2"
          "triângulo"
          "blue"
          LN1-CIReTRIAN))
(define T3
       (make-forma
         "T3"
          "triângulo"
          "green"
          LN1-CIReTRIAN))
(define T4
       (make-forma
         "T4"
          "triângulo"
          "yellow"
          LN1-CIReTRIAN))

(define T5
       (make-forma
         "T5"
          "triângulo"
          "orange"
          LN1-CIReTRIAN))
(define T6
       (make-forma
         "T6"
          "triângulo"
          "brown"
          LN1-CIReTRIAN))

;;CIRCULOS:
(define C1
       (make-forma
         "C1"
          "círculo"
          "red"
          LN1-CIReTRIAN))
(define C2
       (make-forma
         "C2"
          "círculo"
          "blue"
          LN1-CIReTRIAN))
(define C3
       (make-forma
         "C3"
          "círculo"
          "green"
          LN1-CIReTRIAN))
(define C4
       (make-forma
         "C4"
          "círculo"
          "yellow"
          LN1-CIReTRIAN))

(define C5
       (make-forma
         "C5"
          "círculo"
          "orange"
          LN1-CIReTRIAN))
(define C6
       (make-forma
         "C6"
          "círculo"
          "brown"
          LN1-CIReTRIAN))

;;retangulos:
 (define R1
       (make-forma
         "R1"
          "retângulo"
          "red"
          LN1-RET))
 (define R2
       (make-forma
         "R2"
          "retângulo"
          "yellow"
          LN2-RET))
 (define R3
       (make-forma
         "R3"
          "retângulo"
          "brown"
          LN3-RET))
 (define R4
       (make-forma
         "R4"
          "retângulo"
          "blue"
          LN4-RET))
;; -------------------
;; TIPO ListaDeFormas:
;; -------------------
;; Uma ListaDeFormas é
  ;; 1. vazia (empty), ou
  ;; 2. (cons f lf), onde
  ;;     f : Forma
  ;;     lf: ListaFormas

(define LF0   empty)                                                            ;e
(define LF1  (cons R1 empty))                                                   ;d
(define LF2  (cons R3 (cons C1 empty)))                                         ;c
(define LF3  (cons C1 (cons E1 (cons R3 empty))))                               ;d
(define LF4  (cons C2 (cons E1 (cons T1 empty))))                               ;c
(define LF5 (cons E2 (cons T2 (cons R2 (cons C2 (cons R4 (cons C4 empty)))))))  ;a    
(define LF6 (cons E3 (cons T3 (cons R3 (cons C3 empty)))))                      ;b
(define LF7 (cons E4 (cons T4 (cons R3 (cons C3 (cons E4 (cons T4 empty)))))))  ;a
(define LF8 (cons T1 (cons R1 (cons C1 (cons E1 empty)))))                      ;c
(define LF9 (cons T2 (cons R2 (cons C2 (cons E2 empty)))))                      ;b



;; -----------
;; TIPO Aluno:
;; -----------

(define-struct aluno (nome  desenho conceito))
;; Um elemento do conjunto Aluno tem o formato
;;    (make-aluno n d c), onde
;;    n : String, é o nome do aluno
;;    d : ListaDeFormas, é o desenho do aluno
;;    c : String, é o conceito do aluno

;; ========================================================================================
;;                                    FUNÇÕES ÚTEIS 
;; ========================================================================================

;; ----------------------------------------------
;; FUNÇÃO length: (funcão pré-definida no Racket)
;; ----------------------------------------------
;; length : Lista -> Número
;; Dada uma lista (de qualquer tipo), devolve o número de elementos da lista
;; Exemplos:
;;        (length empty) = 0
;;        (length (cons 1 (con 3 (cons -10 empty)))) = 3

;; -----------------------
;; FUNÇÃO desenha-com-nome:
;; -----------------------
;; desenha : Forma -> Imagem
;; Dada uma forma, desenha esta forma com o  seu nome dentro
;; Exemplos:
;;     (desenha-com-nome (make-forma "C2" "circulo" "blue"  (cons 30 empty))) = .
;;     (desenha-com-nome (make-forma "E1" "estrela" "red"     (cons 40 (cons 20 (cons 40 empty))))) = .

 (define (desenha-com-nome @F) ;; Dada uma forma @F
   (overlay  ;; sobrepõe
      ;; o nome da forma @F, e
      (text (forma-nome @F) 20 "black")
      ;; o desenho da forma @F
      (cond
              ;; se @F for um retângulo, desenha este retângulo
              [(string=? "retângulo" (forma-tipo @F))
               (rectangle (first (forma-args @F))(second (forma-args @F)) "solid"(forma-cor @F))]
              ;; se @F for um triângulo, desenha este triângulo
              [(string=? "triângulo" (forma-tipo @F))
               (triangle (first (forma-args @F)) "solid" (forma-cor @F))]
              ;; se @F for um círculo, desenha este circulo
              [(string=? "círculo" (forma-tipo @F))
               (circle (first (forma-args @F)) "solid"(forma-cor @F))]
              ;; se @F for uma estrela, desenha esta estrela
              [(string=? "estrela" (forma-tipo @F))
               (radial-star (first (forma-args @F))(second (forma-args @F)) (third (forma-args @F)) "solid" (forma-cor @F))])))

;; ---------------------------
;; FUNÇÃO desenha-lista-formas:
;; ---------------------------
;; desenha-lista-formas: ListaDeFormas -> Imagem
;; Dada uma lista de formas, desenha as formas da lista lado a lado, com os nomes dentro das formas.
;; Exemplo:
;;    (desenha-lista-formas (cons (make-forma "C2" "circulo" "blue"  (cons 30 empty))
;;                            (cons  (make-forma "E1" "estrela" "red"     (cons 40 (cons 20 (cons 40 empty)))) empty))) = .
 
(define (desenha-lista-formas @LF) ;; Dada uma lista de formas @LF
  (cond
    ;; se a lista @LF estiver vazia, devolve a imagem vazia
    [(empty? @LF) empty-image]
    ;; senão coloca lado a lado
                  ;; o desenho do primeiro elemento de @LF, e 
    [else (beside (desenha-com-nome (first @LF))
                  ;; o desenho do resto dos elementos da lista @LF
                  (desenha-lista-formas (rest @LF)))]))

;; -------------------------
;; FUNÇÃO conta-formas-cor:
;; -------------------------
;; conta-formas-cor: ListaDeFormas CorDeForma -> Numero
;; Dada uma lista de formas e uma cor, diz quantas formas desta cor há na lista.
;; Exemplos:
;;    (conta-formas-cor empty "red") = 0
;;    (conta-formas-cor (cons (make-forma "C2" "circulo" "blue"  (cons 30 empty))
;;                            (cons  (make-forma "E1" "estrela" "red"     (cons 40 (cons 20 (cons 40 empty)))) empty)) "red"))) =   1

(define (conta-formas-cor @LF @COR)
  (cond
    ;; se a lista estiver vazia, devolve zero
    [(empty? @LF) 0]
    ;; senão, soma
    [else  (+
               ;; 1, se o primeiro elemento da lista @LF for da cor @COR, ou zero, caso contrário
               (cond
                    [(string=? (forma-cor (first @LF)) @COR) 1]
                    [else 0])
               ;; ao número de formas da cor @COR do resto da lista @LF
               (conta-formas-cor (rest @LF) @COR))]))
  


;; ========================================================================================
;;                                 EXERCÍCIOS
;; ========================================================================================


;; =============================;; remove-formas-mesma-cor: ListaDeFormas tipo -> ListaDeFormas

;;Objetivo: Dado uma lista de formas, remove formas que tem a mesma cor.
;;Exemplos:
;;1° exemplo: (remove-formas-mesma-cor LF4) -> ((cons (make-forma "E1" "estrela" "yellow" (cons 1 (cons 3 (cons 5 empty)))) (cons (make-forma "T1" "triângulo" "red" (cons 2 empty)) empty)))

;;2° exemplo: (remove-formas-mesma-cor LF1) -> (cons (make-forma "R1" "retângulo" "red" (cons 2 (cons 4 empty))) empty))


;;corpo
(define(remove-formas-mesma-cor @LF);; Dada uma lista de formas 
  (cond
    ;; Se LF (Lista de formas) estiver vazia, retorna vazia
    [(empty? @LF) empty]
   
    ;; Se a cor da primeira forma aparecer mais de uma vez na lista,
    [(> (conta-formas-cor @LF (forma-cor (first @LF))) 1)
     
     ;Executa a função remove-formas-mesma-cor com o resto da lista LF
     (remove-formas-mesma-cor (rest @LF))] 
    ;Caso contrário
    [else
     ;Cria a lista com o primeiro elemento da lista LF e executa 
     ;a função remove-formas-mesma-cor com o resto da lista
     (cons (first @LF)
           (remove-formas-mesma-cor (rest @LF)))]))

;; Testes:
(check-expect(remove-formas-mesma-cor LF1)
(cons (make-forma "R1" "retângulo" "red" (cons 2 (cons 4 empty))) empty))

(check-expect (remove-formas-mesma-cor LF4) (cons (make-forma "E1" "estrela" "yellow" (cons 1 (cons 3 (cons 5 empty)))) (cons (make-forma "T1" "triângulo" "red" (cons 2 empty)) empty))) 
=================================
;; 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
;; ==============================================================


;; Constantes do tipo Aluno:
;; Constantes do tipo Aluno:

(define ALUNO1 (make-aluno "Pedro" LF1 "C"))
(define ALUNO2 (make-aluno "João" LF2 "A"))
(define ALUNO3 (make-aluno "Ana" LF3  "A")) 
(define ALUNO4 (make-aluno "Bianca" LF2 "A"))
(define ALUNO5 (make-aluno "Julia" LF3 "A"))

(define ALUNO6 (make-aluno "Julio" LF0 "D"))
(define ALUNO7 (make-aluno "Lucas" LF1 "A"))
(define ALUNO8 (make-aluno "Maria" LF8 "D")) 
(define ALUNO9 (make-aluno "Mateus"LF2 "B"))
(define ALUNO10 (make-aluno "Juliana" LF3 "A"))



;; -----------------
;; TIPO ListaDeAlunos:
;; -----------------
;; Uma ListaDeAlunos é
  ;; 1. vazia (empty), ou
  ;; 2. (cons a la), onde
  ;;     a : aluno
  ;;     la: ListaAlunos

;; Constantes do tipo ListaDeAlunos:
(define LISTA1 (cons ALUNO1 (cons ALUNO3 empty)))
(define LISTA2 (cons ALUNO2 (cons ALUNO4 empty)))
(define LISTA3 (cons ALUNO6 empty))
(define LISTA4 (cons ALUNO7 (cons ALUNO8 (cons ALUNO5(cons ALUNO9 (cons ALUNO10 empty))))))

;; ==============================================================
;; 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
;; ==============================================================

;; ------------------------------
;; FUNÇÃO  existe-forma-na-lista?: ListaDeFormas TipoDeForma -> Boolean
;; ------------------------------
;; objetivo: dado uma lista de formas e um tipo de forma, verifica se há um elemento desse na lista
;; exemplos:
;;           (existe-forma-na-lista? LISTAFORMA1 "triângulo") -> #true
;;           (existe-forma-na-lista? LISTAFORMA2 "estrela") -> #false

;; dada uma lista e uma forma
(define ( existe-forma-na-lista? LF tipo)
   (cond 
    ;se a lista é vazia devolve falso
    [(empty? LF) #false]
    ;se a lista tem um elemento verifica o primeiro elemento da lista
    [(string=? (forma-tipo (first LF)) tipo) #true]
    ;senão achou procura no resto da lista
    [else (existe-forma-na-lista? (rest LF) tipo)]     
    ))
   
  ;;(check-expect (existe-forma-na-lista? LF6 "triângulo") #true)
  (check-expect (existe-forma-na-lista? LF1 "estrela") #false)
   (check-expect (existe-forma-na-lista? LF0 "estrela") #false)

;; ==============================================================
;; 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
;; ==============================================================
;; remove-formas-mesma-cor: ListaDeFormas -> ListaDeFormas

;;Objetivo: Dado uma lista de formas, remove formas que tem a mesma cor.
;;Exemplos:
;;1° exemplo: (remove-formas-mesma-cor LF4) -> ((cons (make-forma "E1" "estrela" "yellow" (cons 1 (cons 3 (cons 5 empty)))) (cons (make-forma "T1" "triângulo" "red" (cons 2 empty)) empty)))

;;2° exemplo: (remove-formas-mesma-cor LF1) -> (cons (make-forma "R1" "retângulo" "red" (cons 2 (cons 4 empty))) empty))


;;corpo
(define(remove-formas-mesma-cor @LF);; Dada uma lista de formas 
  (cond
    ;; Se LF (Lista de formas) estiver vazia, retorna vazia
    [(empty? @LF) empty]
   
    ;; Se a cor da primeira forma aparecer mais de uma vez na lista,
    [(> (conta-formas-cor @LF (forma-cor (first @LF))) 1)
     
     ;Executa a função remove-formas-mesma-cor com o resto da lista LF
     (remove-formas-mesma-cor (rest @LF))] 
    ;Caso contrário
    [else
     ;Cria a lista com o primeiro elemento da lista LF e executa 
     ;a função remove-formas-mesma-cor com o resto da lista
     (cons (first @LF)
           (remove-formas-mesma-cor (rest @LF)))]))

;; Testes:
(check-expect(remove-formas-mesma-cor LF1)
(cons (make-forma "R1" "retângulo" "red" (cons 2 (cons 4 empty))) empty))

(check-expect (remove-formas-mesma-cor LF4) (cons (make-forma "E1" "estrela" "yellow" (cons 1 (cons 3 (cons 5 empty)))) (cons (make-forma "T1" "triângulo" "red" (cons 2 empty)) empty))) 


;; ==============================================================
;; 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 
;; ==============================================================

;; -------------------------
;; FUNÇÃO  4tipos?:
;;--------------------------

;;4tipos?: ListadeFormas-> Booleano
;;Obj: Dada uma Lista de formas (LF), verificar se tem um de cada tipo de forma (retangulo,circulo,estrela e triangulo) na lista, caso tenha devolve true. Caso contrário, retorna false.

;;exemplos:
;;(4tipos? LF4)= #false
;;(4tipos? LF9)= #true

(define (4tipos? LF) ;; Dada uma lista de formas
   (cond 
    ;se a lista é vazia devolve falso
    [(empty? LF) #false]
    ; Verifica se a lista contém pelo menos um triângulo, um retângulo, um círculo e uma estrela
    [(and (existe-forma-na-lista? LF "triângulo") (existe-forma-na-lista? LF "estrela")
     (existe-forma-na-lista? LF "retângulo") (existe-forma-na-lista? LF "círculo")) #t]))

;;testes:
 (check-expect (4tipos? LF0) #f)
 (check-expect (4tipos? LF5) #t)


;; -------------------------
;; num-min-cores?
;; -------------------------
;; FUNÇÃO  num-min-cores?: ListadeFormas-> Booleano 
;; Objetivo: Dada uma lista de formas, verifica se há duas cores diferentes na lista. Se verdadeiro, devolve true. Senão, retorna false.


(define  (num-min-cores? LF) ;; dada uma lista de formas
   (cond
    ;; verifica se há no mínimo duas cores
    [ (and (existe-cor? LF " red")
       (existe-cor? LF " blue")
       (existe-cor? LF "green")
       (existe-cor? LF "orange")
       (existe-cor? LF  "brown"
       (existe-cor? LF " yellow"))) #t]))

     
     
;;FUNÇÃO auxiliar:
 
;; existe-cor?: ListaDeFormas cor -> Booleano
;; ------------------------------
;; objetivo: dado uma lista de formas e um tipo de cor, verifica se há um elemento dessa cor na lista
;; exemplos:
;;           (existe-cor? LISTAFORMA1 "red") -> #true
;;           (existe-cor? LISTAFORMA2 "blue") -> #false

;; dada uma lista e uma forma
(define ( existe-cor? LF cor)
   (cond 
    ;se a lista é vazia devolve falso
    [(empty? LF) #f]
    ;se o primeiro elemento da lista possui essa cor, retorna true.
    [(string=? (forma-cor (first LF)) cor) #true]
    ;senão, retorna o próximo elemento da lista.
    [else (existe-cor? (rest LF) cor)]     
    ))

;; -------------------------
;; FUNÇÃO  num-par-cores?:
;; -------------------------

      
;; ==============================================================
;; 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 
;; ==============================================================

;; -------------------------
;; FUNÇÃO  conta-requisitos:
;; -------------------------
 

;; ==============================================================
;; 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
;; ==============================================================

;; -----------------------------
;; FUNÇÃO atribui-conceito-aluno:
;; -----------------------------


;; ==============================================================
;; 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 
;; ==============================================================

;; ------------------------
;; FUNÇÃO atribui-conceitos:
;; ------------------------


;; ==============================================================
;; 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8
;; ==============================================================

;; -----------------------------
;; FUNÇÃO mostra-conceitos-turma:
;; -----------------------------
